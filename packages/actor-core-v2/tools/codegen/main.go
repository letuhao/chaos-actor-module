// Codegen: read tools/StatSchema.yml and emit Go/TS constants.
// Usage: go run ./tools/codegen/main.go
package main

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"time"

	"gopkg.in/yaml.v3"
)

type Schema struct {
	Version int `yaml:"version"`
	Stats   struct {
		Primary []struct {
			Key string `yaml:"key"`
		} `yaml:"primary"`
		Derived []struct {
			Key     string `yaml:"key"`
			Display string `yaml:"display"`
		} `yaml:"derived"`
	} `yaml:"stats"`
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}

func write(path string, b []byte) {
	os.MkdirAll(filepath.Dir(path), 0o755)
	must(os.WriteFile(path, b, 0o644))
}

func genGo(schema Schema) []byte {
	var buf bytes.Buffer
	buf.WriteString("// Code generated by codegen; DO NOT EDIT.\n")
	buf.WriteString(fmt.Sprintf("// Generated: %s\n\n", time.Now().Format(time.RFC3339)))
	buf.WriteString("package constants\n\n")
	buf.WriteString("const (\n")
	for _, p := range schema.Stats.Primary {
		buf.WriteString(fmt.Sprintf("\tStat_%s = \"%s\"\n", upperSnake(p.Key), p.Key))
	}
	for _, d := range schema.Stats.Derived {
		buf.WriteString(fmt.Sprintf("\tStat_%s = \"%s\"\n", upperSnake(d.Key), d.Key))
	}
	buf.WriteString(")\n")
	return buf.Bytes()
}

func genTS(schema Schema) []byte {
	var buf bytes.Buffer
	buf.WriteString("// Code generated by codegen; DO NOT EDIT.\n")
	buf.WriteString(fmt.Sprintf("// Generated: %s\n\n", time.Now().Format(time.RFC3339)))
	buf.WriteString("export const Stat = {\n")
	for _, p := range schema.Stats.Primary {
		buf.WriteString(fmt.Sprintf("  %s: '%s',\n", upperCamel(p.Key), p.Key))
	}
	for _, d := range schema.Stats.Derived {
		buf.WriteString(fmt.Sprintf("  %s: '%s',\n", upperCamel(d.Key), d.Key))
	}
	buf.WriteString("} as const;\n")
	return buf.Bytes()
}

// upperSnake converts "hp_max" -> "HP_MAX"
func upperSnake(s string) string {
	out := make([]rune, 0, len(s))
	for _, r := range s {
		if r == '-' {
			r = '_'
		}
		if r == '_' {
			out = append(out, '_')
			continue
		}
		if r >= 'a' && r <= 'z' {
			r = r - 32
		}
		out = append(out, r)
	}
	return string(out)
}

// upperCamel converts "hp_max" -> "HpMax"
func upperCamel(s string) string {
	out := make([]rune, 0, len(s))
	cap := true
	for _, r := range s {
		if r == '_' || r == '-' {
			cap = true
			continue
		}
		if cap && r >= 'a' && r <= 'z' {
			r = r - 32
			cap = false
		} else {
			cap = false
		}
		out = append(out, r)
	}
	return string(out)
}

func main() {
	b, err := os.ReadFile("../StatSchema.yml")
	if err != nil {
		b, err = os.ReadFile("../StatSchema.example.yml")
	}
	must(err)
	var schema Schema
	must(yaml.Unmarshal(b, &schema))

	write("constants/stats_gen.go", genGo(schema))
	write("packages/shared/stats.gen.ts", genTS(schema))
	fmt.Println("Generated: constants/stats_gen.go, packages/shared/stats.gen.ts")
}
